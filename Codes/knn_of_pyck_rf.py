# -*- coding: utf-8 -*-
"""KNN of PyCK_RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IN_yvwUOTbq3_w1x4vIP_WFbEqnb99Np
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn

from google.colab import drive
drive.mount('/content/drive')

path = "drive/My Drive/CombinedInput.xlsx"
df = pd.read_excel(path)

df.head()

df.columns

df.rename({'Unnamed: 0':'Labels'},axis = 1, inplace=True)

df.head()

df.shape

correlation_matrix = df.corr()
correlation_matrix["Labels"]

from sklearn.neighbors import  KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import metrics

df.columns

X = df.iloc[:,1:].values
y = df.iloc[:,0].values

X

X.shape

y

y.shape

# Creating the Training and Test set from data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print('Training Features Shape:', X_train.shape)
print('Training Labels Shape:', y_train.shape)
print('Testing Features Shape:', X_test.shape)
print('Testing Labels Shape:', y_test.shape)

>>> from sklearn.neighbors import KNeighborsClassifier
>>>classifier = KNeighborsClassifier(n_neighbors=3)

# Predicting the Test set results
y_pred = classifier.predict(X_test)
print(y_pred)

print(classifier.score(X_test, y_test))

from sklearn.metrics import accuracy_score  
scores_classification = accuracy_score(y_test, y_pred)
print(scores_classification)

from sklearn.metrics import confusion_matrix,accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)

>>> from sklearn.metrics import mean_squared_error
>>> from math import sqrt
>>> train_preds = classifier.predict(X_train)
>>> mse = mean_squared_error(y_train, train_preds)
>>> rmse = sqrt(mse)
>>> rmse

>>> test_preds = classifier.predict(X_test)
>>> mse = mean_squared_error(y_test, test_preds)
>>> rmse = sqrt(mse)
>>> rmse

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
import numpy as np
import matplotlib.pyplot as plt
  

# Split into training and test set
X_train, X_test, y_train, y_test = train_test_split(
             X, y, test_size = 0.2, random_state=42)
  
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))
  
# Loop over K values
for i, k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
      
    # Compute traning and test data accuracy
    train_accuracy[i] = knn.score(X_train, y_train)
    test_accuracy[i] = knn.score(X_test, y_test)
  
# Generate plot
plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')
  
plt.legend()
plt.xlabel('n_neighbors')
plt.ylabel('Accuracy')
plt.show()



# Making the Confusion Matrix
print(pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted']))

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))